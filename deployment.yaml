#DATABASES CONTAINERS
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgresql-server-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: ms-sql-server-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: sqlite3-server-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nodejs-courses-api-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nodejs-courses-api
  template:
    metadata:
      labels:
        app: nodejs-courses-api
    spec:
      containers:
        - name: postgresql-server-api-container
          image: postgres:latest
          env:
            - name: POSTGRES_PASSWORD
              value: "HDLCrin8*"
            - name: POSTGRES_DATABASE
              value: "courses_db"
          ports:
            - containerPort: 5432
          volumeMounts:
            - name: postgresql-server-pvolume
              mountPath: /var/lib/postgresql/data
        - name: nodejs-courses-api-container
          image: jcortizs/nodejs_courses_api
          env:
            - name: POSTGRES_HOST
              value: "localhost"
            - name: POSTGRES_PORT
              value: "5432"
            - name: POSTGRES_USERNAME
              value: "postgres"
            - name: POSTGRES_PASSWORD
              value: "HDLCrin8*"
            - name: POSTGRES_DATABASE
              value: "courses_db"
          ports:
            - containerPort: 8090
      volumes:
        - name: postgresql-server-pvolume
          persistentVolumeClaim:
            claimName: postgresql-server-pvc
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: dotnet-resources-api-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: dotnet-resources-api
  template:
    metadata:
      labels:
        app: dotnet-resources-api
    spec:
      containers:
        - name: ms-sql-server-container
          image: mcr.microsoft.com/mssql/server:2017-latest-ubuntu
          env:
            - name: ACCEPT_EULA
              value: "Y"
            - name: SA_PASSWORD
              value: "HDLCrin8*"
            - name: MSSQL_PID
              value: Express
          ports:
            - containerPort: 1433
        - name: dotnet-resources-api-container
          image: jcortizs/dotnet_resources_api
          env:
            - name: DBServer
              value: localhost
            - name: ConnectionStrings__DefaultConnection
              value: "Server=tcp:localhost,1433;Database=resources_db;Trusted_Connection=False;TrustServerCertificate=True;MultipleActiveResultSets=true;User ID=sa;Password=HDLCrin8*;"
          ports:
            - containerPort: 80
      volumes:
        - name: ms-sql-server-pvolume
          persistentVolumeClaim:
            claimName: ms-sql-server-pvc
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: django-gateway-api-deployment
spec:
  selector:
    matchLabels:
      app: django-gateway-api
  template:
    metadata:
      labels:
        app: django-gateway-api
    spec:
      containers:
        - name: django-gateway-api-container
          image: jcortizs/django_gateway_api
          ports:
            - containerPort: 8070
          volumeMounts:
            - name: sqlite3-server-pvolume
              mountPath: /var/lib/sqlite3/data
      volumes:
        - name: sqlite3-server-pvolume
          persistentVolumeClaim:
            claimName: sqlite3-server-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: nodejs-courses-api-service
spec:
  selector:
    app: nodejs-courses-api
  ports:
    - name: http
      protocol: TCP
      port: 8090
      targetPort: 8090
  type: LoadBalancer
---
apiVersion: v1
kind: Service
metadata:
  name: dotnet-resources-api-service
spec:
  selector:
    app: dotnet-resources-api
  ports:
    - name: http
      protocol: TCP
      port: 8080
      targetPort: 80
  type: LoadBalancer
---
apiVersion: v1
kind: Service
metadata:
  name: django-gateway-api-service
spec:
  selector:
    app: django-gateway-api
  ports:
    - name: http
      protocol: TCP
      port: 8070
      targetPort: 8070
    - name: dotnet-resources-api-port
      protocol: TCP
      port: 8080
      targetPort: 8080
    - name: nodejs-courses-api-port
      protocol: TCP
      port: 8090
      targetPort: 8090
    - name: laravel-auth-api-port
      protocol: TCP
      port: 8060
      targetPort: 8060
  type: LoadBalancer
